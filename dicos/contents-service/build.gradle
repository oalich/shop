import com.github.jk1.license.render.*
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask


plugins {
    id("com.github.jk1.dependency-license-report") version "2.5"
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("idea")
    id("io.spring.dependency-management") version "1.1.0"
    id("java")
    id("java-library") // needed to make sure that transitive deps have 'compile' scope
    id("maven-publish")
    id("jacoco")
    id("org.sonarqube") version "4.0.0.2929"
    id("org.springframework.boot") version "3.1.6"
    id("org.openapi.generator") version "7.1.0"
}

ext {
    versions = [
            lombok: "1.18.24",
            mapstruct: "1.5.5.Final",
            cucumber: "7.13.0",
            mockito: "5.4.0",
            junit: "5.4.0",
            junitJupiter: "5.10.0",
            restAssured: "5.3.2",
            activemqArtemis: "2.31.2"
    ]
}

version = "0.0.1-SNAPSHOT"
group = "com.dhl.dicos"
java.sourceCompatibility = JavaVersion.toVersion("17")
licenseReport.excludeBoms = true

repositories {
    maven {
        url "https://artifactory.dhl.com/maven-remote"
    }
}

configurations {
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

dependencies {
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter:3.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.1.0'
    implementation "org.springframework.boot:spring-boot-starter-log4j2"
    implementation ("org.springframework.boot:spring-boot-starter-webflux") {
        {
            exclude(group: 'org.springframework.boot', module: 'spring-boot-starter-reactor-netty')
        }
    }


    // Common
    implementation "com.fasterxml.jackson.core:jackson-databind:2.14.2"
    implementation "commons-lang:commons-lang:2.6"
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation "org.projectlombok:lombok:${versions.lombok}"
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation "org.mapstruct:mapstruct:${versions.mapstruct}"
    implementation 'org.apache.commons:commons-collections4:4.4'
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${versions.mapstruct}"


    // OpenAPI and Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.15'
    implementation "org.openapitools:jackson-databind-nullable:0.2.6"
    implementation 'org.openapitools:openapi-generator:7.0.1'


    /* Test dependencies*/
    testAnnotationProcessor "org.projectlombok:lombok:${versions.lombok}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "io.cucumber:cucumber-java:${versions.cucumber}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junitJupiter}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.mockito:mockito-junit-jupiter:${versions.junit}"
    testImplementation "io.cucumber:cucumber-spring:${versions.cucumber}"
    testImplementation "io.cucumber:cucumber-junit-platform-engine:${versions.cucumber}"
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.11.0'
    testImplementation 'com.squareup.okhttp3:okhttp:4.11.0'
    testImplementation "io.rest-assured:rest-assured:${versions.restAssured}"
    testImplementation 'org.apache.activemq:artemis-junit:2.31.2'
}

idea.module.contentRoot = file('../..')

// this works, but it is not working with single quotes!!
sourceSets.main.java.srcDirs += "$buildDir/generated/src/main/java"
sourceSets.main.java.srcDirs += "$buildDir/api-client-generated/src/main/java"

// for checking the current settings of all source Dirs, especially the generated one
sourceSets.main.java.srcDirs.each { println "javaMains: "+it }

// avoiding the clash with the OPENAPI generated Main-Class
springBoot.mainClass = 'com.dhl.dicos.ContentsServiceApplication'
// always generate the API during the build task
//compileJava.dependsOn tasks.openApiGenerate

sonarqube {
    properties {
        property("sonar.projectKey", "de.deutschepost.dicos.contents-service")
        property("sonar.projectName", "ITR-4195-DiCoS-contents-service")
        property("sonar.host.url", "https://sonarqube1.lcm.deutschepost.de")
        property("sonar.qualitygate.wait", "true")
        property("sonar.coverage.exclusions", "**/exception/*,**/constants/*")
        property("sonar.exclusions", "**/exception/*,**/constants/*")
    }
}

licenseReport {
    unionParentPomLicenses = false
    projects = [project] + project.subprojects
    configurations = ['runtimeClasspath']
    excludeOwnGroup = true
    renderers = [new JsonReportRenderer('oslc-gradle-plugin-report.json', false)]
    allowedLicensesFile = new File("allowed-licenses.json")
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
    }
}

task cucumber() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [
                    '--plugin', 'pretty',
                    '--plugin', 'junit:integration-test/cucumber.xml',
                    '--plugin', 'html:integration-test/cucumber.html',
                    '--glue', 'com.dhl.dicos',
                    'src/test/resources/feature']
        }
    }
}

processResources {
    filesMatching("**/application.yml") {
        expand( project.properties )
    }
}

tasks.register('buildOpenApiContentsService', GenerateTask) {
    generatorName.set("spring")
    inputSpec.set("$projectDir/src/main/resources/contentsService.yaml")
    outputDir.set("$buildDir/generated")
    apiPackage.set("com.dhl.dicos.api")
    invokerPackage.set("com.dhl.dicos.invoker")
    modelPackage.set("com.dhl.dicos.model")
    skipValidateSpec.set(true)
    configOptions.set([
            dateLibrary   : "java17",
            interfaceOnly : "true",
            useSpringBoot3: "true"
    ])
}


tasks.compileJava.dependsOn('buildOpenApiContentsService')
